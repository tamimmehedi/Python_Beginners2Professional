Let’s look at a simple sequence that has fascinated and foxed mathematicians for many years. They still cannot answer
even quite simple questions about this.

The “computational rule” for creating the sequence is to start from some given n, and to generate the next term of
the sequence from n, either by halving n, (whenever n is even), or else by multiplying it by three and adding 1. The
sequence terminates when n reaches 1.

This Python snippet captures that algorithm:

  n = 1027371
  while n != 1:
    print(n, end=", ")
    if n % 2 == 0:  
      n = n // 2
  else:
      n = n * 3 + 1
  print(n, end=".\n")

Notice first that the print function on line 4 has an extra argument end=", ". This tells the print function to
follow the printed string with whatever the programmer chooses (in this case, a comma followed by a space), instead
of ending the line. So each time something is printed in the loop, it is printed on the same output line, with the 
numbers separated by commas. The call to print(n, end=".\n") at line 9 after the loop terminates will then print the
final value of n followed by a period and a newline character. (You’ll cover the \n (newline character) later).

The condition for continuing with this loop is n != 1, so the loop will continue running until it reaches its termination
condition, (i.e. n == 1).

Each time through the loop, the program outputs the value of n and then checks whether it is even or odd. If it is even,
the value of n is divided by 2 using integer division. If it is odd, the value is replaced by n * 3 + 1.

Since n sometimes increases and sometimes decreases, there is no obvious proof that n will ever reach 1, or that the
program terminates. For some particular values of n, we can prove termination. For example, if the starting value is
a power of two, then the value of n will be even each time through the loop until it reaches 1. The previous example
ends with such a sequence, starting with 16.

See if you can find a small starting number that needs more than a hundred steps before it terminates.
Particular values aside, the interesting question was first posed by a German mathematician called Lothar Collatz: the
Collatz conjecture (also known as the 3n + 1 conjecture), is that this sequence terminates for all positive values of n.
So far, no one has been able to prove it or disprove it! (A conjecture is a statement that might be true, but nobody
knows for sure.)

Think carefully about what would be needed for a proof or disproof of the conjecture “All positive integers will
eventually converge to 1 using the Collatz rules”. With fast computers we have been able to test every integer up to
very large values, and so far, they have all eventually ended up at 1. But who knows? Perhaps there is some as-yet
untested number which does not reduce to 1.

You’ll notice that if you don’t stop when you reach 1, the sequence gets into its own cyclic loop: 1, 4, 2, 1, 4, 2, 1, 4
. . . So one possibility is that there might be other cycles that we just haven’t found yet.

Wikipedia has an informative article about the Collatz conjecture. The sequence also goes under other names (Hail-
stone sequence, Wonderous numbers, etc.), and you’ll find out just how many integers have already been tested by
computer, and found to converge!

Use a for loop if you know, before you start looping, the maximum number of times that you’ll need to execute the
body. For example, if you’re traversing a list of elements, you know that the maximum number of loop iterations you
can possibly need is “all the elements in the list”. Or if you need to print the 12 times table, we know right away how
many times the loop will need to run.

So any problem like “iterate this weather model for 1000 cycles”, or “search this list of words”, “find all prime numbers
up to 10000” suggest that a for loop is best.

By contrast, if you are required to repeat some computation until some condition is met, and you cannot calculate in
advance when (of if) this will happen, as we did in this 3n + 1 problem, you’ll need a while loop.

We call the first case definite iteration — we know ahead of time some definite bounds for what is needed. The latter
case is called indefinite iteration — we’re not sure how many iterations we’ll need — we cannot even establish an
upper bound!
