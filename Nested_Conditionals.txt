One conditional can also be nested within another. (It is the same theme of composability, again!) We could have
written the previous example as follows:

if x < y:
  <STATEMENTS_A>
else:
if x > y:
  <STATEMENTS_B>
else:
  <STATEMENTS_C>
  
The outer conditional contains two branches. The second branch contains another if statement, which has two
branches of its own. Those two branches could contain conditional statements as well.
Although the indentation of the statements makes the structure apparent, nested conditionals very quickly become very
difficult to read. In general, it is a good idea to avoid them when we can.
Logical operators often provide a way to simplify nested conditional statements. For example, we can rewrite the
following code using a single conditional:

if 0 < x:      # Assume x is an int here
  if x < 10:
    print("x is a positive single digit.")
    
The print function is called only if we make it past both the conditionals, so instead of the above which uses two
if statements each with a simple condition, we could make a more complex condition using the and operator. Now
we only need a single if statement:

if 0 < x and x < 10:
  print("x is a positive single digit.")
  
In this case there is a third option:

if 0 < x < 10:
  print("x is a positive single digit.")
