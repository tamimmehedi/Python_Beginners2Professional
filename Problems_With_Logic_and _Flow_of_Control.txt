We often want to know if some condition holds for any item in a list, e.g. “does the list have any odd numbers?” This
is a common mistake:

    # Buggy version
    for number in numbers:
      if number % 2 == 1:
        print(True)
        break
      else:
      
    print(False)
    break
    
Can we spot two problems here? As soon as we execute a break, we’ll leave the loop. So the logic of saying “If I
find an odd number I can return True” is fine. However, we cannot return False after only looking at one item —
we can only return False if we’ve been through all the items, and none of them are odd. So line 10 should not be
there, and lines 8 and 9 have to be outside the loop. Here is a corrected version:

    numbers = [10, 5, 24, 8, 6]
    for number in numbers:
        if number % 2 == 1:
        print(True)
        break
    else:
        print(False)

We’ll see This “eureka”, or “short-circuit” style of breaking from a loop as soon as we are certain what the outcome
will be again later.

Note that this uses a for ... else construct.

The else clause is executed when a loop has looped without encountering any break statements. This is ideal for our
case here. Also note that the else is not, in this case, related to the if statement that occurs inside the loop.

    count = 0
    for number in numbers:
    if number % 2 == 1:
        count += 1
    # Count the odd numbers
    if count > 0:
        print(True)
    else:
        print(False)
        
The performance disadvantage of this one is that it traverses the whole list, even if it knows the outcome very early on.

Do I need to look at all elements in all cases? Can I shortcut and take an early exit? Under what conditions? When
will I have to examine all the items in the list?

The code in lines 6-9 can also be tightened up. The expression count > 0 itself represents a Boolean value, either
True or False (we can say it ‘evaluates’ to either True or False). That True/False value can be used directly
in the print statement. So we could cut out that code and simply have the following:

    numbers = [10, 5, 24, 8, 6]
    count = 0
    for number in numbers:
    if number % 2 == 1:
    count += 1          # Count the odd numbers
    print(count > 0)    # Aha! a programmer who understands that Boolean
                        #expressions are not just used in if statements!
