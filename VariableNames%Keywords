Variable names can be arbitrarily long. They can contain both letters and digits, but they have to begin with a letter
or an underscore. Although it is legal to use uppercase letters, by convention we don’t. If you do, remember that case
matters. Bruce and bruce are different variables.

The underscore character ( _) can appear in a name. It is often used in names with multiple words, such as my_name
or price_of_tea_in_china.

There are some situations in which names beginning with an underscore have special meaning, so a safe rule for
beginners is to start all names with a letter.

If you give a variable an illegal name, you get a syntax error:

>>> 76trombones = "big parade"
SyntaxError: invalid syntax

>>> more$ = 1000000
SyntaxError: invalid syntax

>>> class = "Computer Science 101"
SyntaxError: invalid syntax

76trombones is illegal because it does not begin with a letter. more$ is illegal because it contains an illegal
character, the dollar sign. But what’s wrong with class?

It turns out that class is one of the Python keywords. Keywords define the language’s syntax rules and structure,
and they cannot be used as variable names.

Python has thirty-something keywords (and every now and again improvements to Python introduce or eliminate one
or two):

                  and def finally in pass yield as del for is raise True assert
                  
                  from lambda return False break else global nonlocal try None 
                  
                  except if not while continue exec import or with elif class

You might want to keep this list handy. If the interpreter complains about one of your variable names and you don’t
know why, see if it is on this list.

Programmers generally choose names for their variables that are meaningful to the human readers of the program —
they help the programmer document, or remember, what the variable is used for.
