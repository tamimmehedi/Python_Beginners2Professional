Here we’ll look at three more Python functions, int, float and str, which will (attempt to) convert their arguments
into types int, float and str respectively. We call these type converter functions.
The int function can take a floating point number or a string, and turn it into an int. For floating point numbers, it
discards the decimal portion of the number — a process we call truncation towards zero on the number line. Let us
see this in action:

>>> int(3.14)
3
>>> int(3.9999)  # This doesn't round to the closest int!
3
>>> int(3.0)
3
>>> int(-3.999)
-3
>>> int(minutes / 60)
10
>>> int("2345")
2345
>>> int(17)
17
>>> int("23 bottles")

# Note that the result is closer to zero
# Parse a string to produce an int
# It even works if arg is already an int
This last case doesn’t look like a number — what do we expect?
Traceback (most recent call last):
File "<interactive input>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '23 bottles'
The type converter float can turn an integer, a float, or a syntactically legal string into a float:
>>> float(17)
17.0
>>> float("123.45")
123.45
The type converter str turns its argument into a string:
>>> str(17)
'17'
>>> str(123.45)
'123.45'
